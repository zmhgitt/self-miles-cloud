{"doc":" @ClassName: StringUtils\n @Description: 类描述\n @author: Miles\n @date: 2024/5/31 11:07\n","fields":[],"enumConstants":[],"methods":[{"name":"toUnderScoreCase","paramTypes":["java.lang.String"],"doc":" 驼峰转下划线命名\n"},{"name":"convertToCamelCase","paramTypes":["java.lang.String"],"doc":" 将下划线大写方式命名的字符串转换为驼峰式。如果转换前的下划线大写方式命名的字符串为空，则返回空字符串。 例如：HELLO_WORLD->HelloWorld\n\n @param name 转换前的下划线大写方式命名的字符串\n @return 转换后的驼峰式命名的字符串\n"},{"name":"toCamelCase","paramTypes":["java.lang.String"],"doc":" 驼峰式命名法 例如：user_name->userName\n"},{"name":"format","paramTypes":["java.lang.String","java.lang.Object[]"],"doc":" 格式化文本, {} 表示占位符<br>\n 此方法只是简单将占位符 {} 按照顺序替换为参数<br>\n 如果想输出 {} 使用 \\\\转义 { 即可，如果想输出 {} 之前的 \\ 使用双转义符 \\\\\\\\ 即可<br>\n 例：<br>\n 通常使用：format(\"this is {} for {}\", \"a\", \"b\") -> this is a for b<br>\n 转义{}： format(\"this is \\\\{} for {}\", \"a\", \"b\") -> this is {} for a<br>\n 转义\\： format(\"this is \\\\\\\\{} for {}\", \"a\", \"b\") -> this is \\a for b<br>\n\n @param template 文本模板，被替换的部分用 {} 表示\n @param params   参数值\n @return 格式化后的文本\n"}],"constructors":[]}